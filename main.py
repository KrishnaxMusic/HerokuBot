import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient
import time

# -----------------------
# CONFIG
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MONGO_URL = os.getenv("MONGO_URL")

bot = telebot.TeleBot(BOT_TOKEN)

# -----------------------
# MONGO DB SETUP
# -----------------------
client = MongoClient(MONGO_URL)
db = client['usa_bot']
users_col = db['users']

# -----------------------
# TEMP STORAGE
# -----------------------
pending_messages = {}  # {user_id: {'service': ..., 'utr': ..., 'screenshot': ...}}
active_chats = {}      # {user_id: True/False ‚Üí admin chat mode}
user_stage = {}        # {user_id: 'start'|'service'|'waiting_utr'|'done'}

# -----------------------
# START COMMAND
# -----------------------
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = msg.from_user.id
    users_col.update_one({'user_id': user_id}, {'$set': {'user_id': user_id}}, upsert=True)
    user_stage[user_id] = "start"

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("Àπ ô·¥ú è  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÀº", callback_data="buy"))
    # Send photo with caption and button
    bot.send_photo(
        msg.chat.id,
        photo="https://files.catbox.moe/if8etf.jpg",   # <-- replace with your own image URL
        caption="üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è H·¥á Ä·¥è·¥ã·¥ú B·¥è·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á!\nüöÄ G·¥á·¥õ  è·¥è·¥ú Ä H·¥á Ä·¥è·¥ã·¥ú s·¥á·¥õ·¥ú·¥ò  ú·¥á Ä·¥á!\nüíº C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs @BRANDEDKING8",
        reply_markup=kb
    )


# -----------------------
# CALLBACK HANDLER
# -----------------------
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    user_id = call.from_user.id
    data = call.data

    # ---- BUY BUTTON ----
    if data == "buy":
        user_stage[user_id] = "service"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("Telegram ‚Äì ‚Çπ50", callback_data="buy_telegram"))
        kb.add(InlineKeyboardButton("WhatsApp ‚Äì ‚Çπ45", callback_data="buy_whatsapp"))
        bot.edit_message_text("Choose your service:", call.message.chat.id, call.message.message_id, reply_markup=kb)

        
    # ---- SERVICE SELECT ----
    elif data.startswith("buy_") and user_stage.get(user_id) == "service":
        service = "Heroku" if "Heroku" in data else "Heroku Team"
        user_stage[user_id] = "waiting_utr"
        pending_messages[user_id] = {'service': service}
        bot.send_photo(call.message.chat.id, "https://files.catbox.moe/poeeya.jpg",
                       caption=f"S·¥Ñ·¥Ä…¥ & P·¥Ä è F·¥è Ä {service}\nT ú·¥á…¥ S·¥á…¥·¥Ö Y·¥è·¥ú Ä *ùü∑ùü∏ D…™…¢…™·¥õ* UTR N·¥ú·¥ç ô·¥á Ä O Ä S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ H·¥á Ä·¥á.")

    # ---- ADMIN ACTION ----
    elif data.startswith(("Àπ C·¥è…¥“ì…™ Ä·¥ç Àº","Àπ C·¥Ä…¥·¥Ñ·¥á ü Àº","Àπ C ú·¥Ä·¥õ Àº","Àπ E…¥·¥Ö·¥Ñ ú·¥Ä·¥õ Àº")):
        parts = data.split("|")
        action = parts[0]
        target_id = int(parts[1])

        # ---- START CHAT ----
        if action == "chat":
            active_chats[target_id] = True
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üõë Àπ E…¥·¥Ö ·¥õ ú…™s C ú·¥Ä·¥õ Àº", callback_data=f"endchat|{target_id}"))
            bot.send_message(target_id, "üí¨ Àπ B·¥è·¥õ …™s ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥°…™·¥õ ú  è·¥è·¥ú Àº")
            bot.send_message(ADMIN_ID, f"üí¨ Àπ C ú·¥Ä·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥°…™·¥õ ú ·¥ús·¥á Ä Àº {target_id}", reply_markup=kb)
            return

        # ---- END CHAT ----
        elif action == "Àπ E…¥·¥Ö·¥Ñ ú·¥Ä·¥õ Àº":
            bot.send_message(ADMIN_ID, f"üí¨ T è·¥ò·¥á ·¥õ ú·¥á “ì…™…¥·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ·¥è ·¥ús·¥á Ä {target_id}  ô·¥á“ì·¥è Ä·¥á ·¥á…¥·¥Ö…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ:")
            bot.register_next_step_handler_by_chat_id(ADMIN_ID, lambda m: finish_chat(m, target_id))
            return

        # ---- CONFIRM/CANCEL PAYMENT ----
        if target_id not in pending_messages:
            bot.send_message(ADMIN_ID, "‚ö†Ô∏è N·¥è ·¥ò·¥á…¥·¥Ö…™…¥…¢  Ä·¥á«´·¥ú·¥ás·¥õ “ì Ä·¥è·¥ç ·¥õ ú…™s ·¥ús·¥á Ä.")
            return

        info = pending_messages.pop(target_id)
        service = info.get('service', 'Service')

        if action == "Àπ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç Àº":
            bot.send_message(target_id, f"‚úÖ Y·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü! G·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ {service} ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ‚Ä¶")
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üí¨ C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä", callback_data=f"chat|{target_id}"))
            bot.send_message(ADMIN_ID, f"P·¥Ä è·¥ç·¥á…¥·¥õ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç·¥á·¥Ö “ì·¥è Ä ·¥ús·¥á Ä {target_id}.", reply_markup=kb)
        else:
            bot.send_message(target_id, "‚ùå Y·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ …¥·¥è·¥õ  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥Ä…¥·¥Ö  è·¥è·¥ú Ä «´·¥ú·¥á Ä è …™s ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.")
            bot.send_message(ADMIN_ID, f"‚ùå YP·¥Ä è·¥ç·¥á…¥·¥õ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö “ì·¥è Ä ·¥ús·¥á Ä. {target_id}.")


# -----------------------
# FINISH CHAT FUNCTION
# -----------------------
def finish_chat(msg, target_id):
    final_text = msg.text.strip()
    if target_id in active_chats and active_chats[target_id]:
        bot.send_message(target_id, final_text)
        active_chats.pop(target_id, None)
        bot.send_message(ADMIN_ID, f"üí¨ C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä {target_id} ended.")
    else:
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è N·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä {target_id}.")

# -----------------------
# MESSAGE HANDLER
# -----------------------
@bot.message_handler(func=lambda m: True, content_types=['text','photo'])
def chat_handler(msg):
    user_id = msg.from_user.id

    # ---- ADMIN CHAT ----
    if user_id == ADMIN_ID:
        for uid, active in active_chats.items():
            if active:
                bot.send_message(uid, f"ü§ñBot: {msg.text if msg.content_type=='text' else 'üì∏ S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ s·¥á…¥·¥õ'}")
        return

    # ---- USER CHAT ----
    if user_id in active_chats and active_chats[user_id]:
        bot.send_message(ADMIN_ID, f"üí¨ User {user_id}: {msg.text if msg.content_type=='text' else 'üì∏ S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ s·¥á…¥·¥õ'}")
        return

    stage = user_stage.get(user_id, "none")
    if stage != "waiting_utr":
        bot.send_message(user_id, "‚ö†Ô∏è P ü·¥á·¥Äs·¥á “ì·¥è ü ü·¥è·¥° ·¥õ ú·¥á s·¥õ·¥á·¥òs ·¥è Ä ·¥ús·¥á  /start ·¥õ·¥è  ô·¥á…¢…™…¥.")
        return

    pending_messages.setdefault(user_id, {})
    user_name = msg.from_user.first_name
    uid = msg.from_user.id
    service = pending_messages[user_id].get('service', 'Service')

    if msg.content_type == 'text':
        text = msg.text.strip()
        if not text.isdigit() or len(text) != 12:
            bot.send_message(user_id, "‚ö†Ô∏è P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä ·¥Ä ·¥†·¥Ä ü…™·¥Ö *ùü∑ùü∏ ·¥Ö…™…¢…™·¥õ* UTR …¥·¥ú·¥ç ô·¥á Ä ·¥è Ä s·¥á…¥·¥Ö ·¥Ä s·¥Ñ Ä·¥á·¥á…¥s ú·¥è.")
            return
        pending_messages[user_id]['utr'] = text
        info_text = f"UTR: {text}"
    elif msg.content_type == 'photo':
        photo_id = msg.photo[-1].file_id
        pending_messages[user_id]['screenshot'] = photo_id
        info_text = "üì∏ S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ s·¥á…¥·¥õ"
    else:
        bot.send_message(user_id, "‚ö†Ô∏è O…¥ ü è ·¥õ·¥áx·¥õ (UTR) ·¥è Ä ·¥ò ú·¥è·¥õ·¥è (s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ) ·¥Ä ü ü·¥è·¥°·¥á·¥Ö.")
        return

    bot.send_message(user_id, "üîÑ P·¥Ä è·¥ç·¥á…¥·¥õ  Ä·¥á«´·¥ú·¥ás·¥õ …™s ·¥†·¥á Ä…™“ì è…™…¥…¢  ô è ·¥è·¥ú Ä  Ä·¥á·¥Ñ·¥è Ä·¥Ös. P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ùüª‚Äìùü∑ùü∂ s·¥á·¥Ñ·¥è…¥·¥Ös‚Ä¶")

    # ---- SEND ADMIN ----
    admin_text = (
        f"üí∞ Payment Request\n"
        f"Name: <a href='tg://user?id={uid}'>{user_name}</a>\n"
        f"User ID: {uid}\n"
        f"Service: {service}\n"
        f"{info_text}"
    )

    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚úÖ Àπ C·¥è…¥“ì…™ Ä·¥ç Àº", callback_data=f"confirm|{uid}"),
        InlineKeyboardButton("‚ùå Àπ C·¥Ä…¥·¥Ñ·¥á ü Àº", callback_data=f"cancel|{uid}")
    )

    if 'screenshot' in pending_messages[user_id]:
        bot.send_photo(ADMIN_ID, pending_messages[user_id]['screenshot'], caption=admin_text, parse_mode="HTML", reply_markup=kb)
    else:
        bot.send_message(ADMIN_ID, admin_text, parse_mode="HTML", reply_markup=kb)

    user_stage[user_id] = "done"

# -----------------------
# COMPLETE COMMAND
# -----------------------
@bot.message_handler(commands=['complete'])
def complete(msg):
    if msg.from_user.id != ADMIN_ID: return
    ended = []
    for uid, active in active_chats.items():
        if active:
            service = pending_messages.get(uid, {}).get('service', 'Service')
            bot.send_message(uid, f"‚úÖ Y·¥è·¥ú Ä {service} ·¥ò Ä·¥è·¥Ñ·¥áss …™s ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á. T ú·¥Ä…¥·¥ã  è·¥è·¥ú “ì·¥è Ä ·¥ús…™…¥…¢ ·¥è·¥ú Ä  ô·¥è·¥õ.")
            ended.append(uid)
    for uid in ended:
        active_chats.pop(uid, None)
    bot.send_message(ADMIN_ID, "üí¨ A ü ü ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ ú·¥Ä·¥õs ·¥á…¥·¥Ö·¥á·¥Ö.")

# -----------------------
# REFUND COMMAND
# -----------------------
@bot.message_handler(commands=['refund'])
def refund(msg):
    if msg.from_user.id != ADMIN_ID: return
    ended = []
    for uid, active in active_chats.items():
        if active:
            bot.send_message(uid, "‚ùå T·¥á·¥Ñ ú…¥…™·¥Ñ·¥Ä ü …™ss·¥ú·¥á. Y·¥è·¥ú Ä ·¥ç·¥è…¥·¥á è ·¥°…™ ü ü  ô·¥á  Ä·¥á“ì·¥ú…¥·¥Ö·¥á·¥Ö. P ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ ùü∑ùü∂‚Äìùü∏ùü∂ s·¥á·¥Ñ·¥è…¥·¥Ös‚Ä¶")
            time.sleep(4)
            ended.append(uid)
    for uid in ended:
        active_chats.pop(uid, None)
    bot.send_message(ADMIN_ID, "üí¨ R·¥á“ì·¥ú…¥·¥Ö ·¥ò Ä·¥è·¥Ñ·¥áss·¥á·¥Ö “ì·¥è Ä ·¥Ä ü ü ·¥Ä·¥Ñ·¥õ…™·¥†·¥á ·¥Ñ ú·¥Ä·¥õs.")

# -----------------------
# BROADCAST
# -----------------------
@bot.message_handler(commands=['broadcast'])
def broadcast(msg):
    if msg.from_user.id != ADMIN_ID: return
    text = msg.text.partition(' ')[2]
    if not text:
        bot.reply_to(msg, "‚ö†Ô∏è Usage: /broadcast Y·¥è·¥ú Ä ·¥ç·¥áss·¥Ä…¢·¥á  ú·¥á Ä·¥á")
        return
    sent = 0
    for u in users_col.find():
        try:
            bot.send_message(u['user_id'], f"üì¢ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ:\n{text}")
            sent += 1
        except: pass
    bot.reply_to(msg, f"‚úÖ B Ä·¥è·¥Ä·¥Ö·¥Ñ·¥Äs·¥õ s·¥á…¥·¥õ ·¥õ·¥è {sent} ·¥ús·¥á Äs.")

# -----------------------
# RUN BOT
# -----------------------
print("‚úÖ  ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö  ú·¥á Ä·¥è·¥ã·¥ú  ô·¥è·¥õ  Ä·¥ú…¥…¥…™…¥…¢‚Ä¶")
bot.infinity_polling()
