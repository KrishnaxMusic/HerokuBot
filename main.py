import os
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from pymongo import MongoClient
import time

# -----------------------
# CONFIG
# -----------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
MONGO_URL = os.getenv("MONGO_URL")

bot = telebot.TeleBot(BOT_TOKEN)

# -----------------------
# MONGO DB SETUP
# -----------------------
client = MongoClient(MONGO_URL)
db = client['usa_bot']
users_col = db['users']

# -----------------------
# TEMP STORAGE
# -----------------------
pending_messages = {}  # {user_id: {'service': ..., 'utr': ..., 'screenshot': ...}}
active_chats = {}      # {user_id: True/False ‚Üí admin chat mode}
user_stage = {}        # {user_id: 'start'|'service'|'waiting_utr'|'done'}

# -----------------------
# START COMMAND
# -----------------------
@bot.message_handler(commands=['start'])
def start(msg):
    user_id = msg.from_user.id
    users_col.update_one({'user_id': user_id}, {'$set': {'user_id': user_id}}, upsert=True)
    user_stage[user_id] = "start"

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("Àπ ô·¥ú è  ú·¥á Ä·¥è·¥ã·¥ú ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õÀº", callback_data="buy"))
    
    bot.send_photo(
        msg.chat.id,
        photo="https://files.catbox.moe/if8etf.jpg",
        caption="üëã W·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥õ·¥è H·¥á Ä·¥è·¥ã·¥ú B·¥è·¥õ S·¥á Ä·¥†…™·¥Ñ·¥á!\nüöÄ G·¥á·¥õ  è·¥è·¥ú Ä H·¥á Ä·¥è·¥ã·¥ú s·¥á·¥õ·¥ú·¥ò  ú·¥á Ä·¥á!\nüíº C·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä “ì·¥è Ä ·¥ç·¥è Ä·¥á ·¥Ö·¥á·¥õ·¥Ä…™ üs @BRANDEDKING8",
        reply_markup=kb
    )


# -----------------------
# CALLBACK HANDLER
# -----------------------
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    user_id = call.from_user.id
    data = call.data

    # ---- BUY BUTTON ----
    if data == "buy":
        user_stage[user_id] = "service"
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("Àπ H·¥á Ä·¥è·¥ã·¥ú T·¥á·¥Ä·¥ç Àº‚Äì ‚Çπ350", callback_data="buy_Heroku Team"))
        kb.add(InlineKeyboardButton("Àπ H·¥á Ä·¥è·¥ã·¥ú P·¥á Äs·¥è…¥·¥Ä ü Àº ‚Äì ‚Çπ300", callback_data="buy_Heroku Personal"))

        # Safely edit message, fallback to sending a new message
        try:
            if call.message and call.message.message_id:
                bot.edit_message_text(
                    "Choose your service:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=kb
                )
            else:
                bot.send_message(call.from_user.id, "Choose your service:", reply_markup=kb)
        except Exception:
            bot.send_message(call.from_user.id, "Choose your service:", reply_markup=kb)

    # ---- SERVICE SELECT ----
    elif data.startswith("buy_") and user_stage.get(user_id) == "service":
        service = "Heroku Team" if "Team" in data else "Heroku Personal"
        user_stage[user_id] = "waiting_utr"
        pending_messages[user_id] = {'service': service}
        bot.send_photo(
            call.from_user.id,
            "https://files.catbox.moe/poeeya.jpg",
            caption=f"S·¥Ñ·¥Ä…¥ & P·¥Ä è F·¥è Ä {service}\nT ú·¥á…¥ S·¥á…¥·¥Ö Y·¥è·¥ú Ä *ùü∑ùü∏ D…™…¢…™·¥õ* UTR N·¥ú·¥ç ô·¥á Ä O Ä S·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ H·¥á Ä·¥á."
        )

    # ---- ADMIN ACTION ----
    elif "|" in data:
        action, target_id = data.split("|")
        target_id = int(target_id)

        if action == "chat":
            active_chats[target_id] = True
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üõë Àπ E…¥·¥Ö ·¥õ ú…™s C ú·¥Ä·¥õ Àº", callback_data=f"endchat|{target_id}"))
            bot.send_message(target_id, "üí¨ Àπ B·¥è·¥õ …™s ·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö ·¥°…™·¥õ ú  è·¥è·¥ú Àº")
            bot.send_message(ADMIN_ID, f"üí¨ Àπ C ú·¥Ä·¥õ s·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ·¥°…™·¥õ ú ·¥ús·¥á Ä Àº {target_id}", reply_markup=kb)
            return

        elif action == "endchat":
            bot.send_message(ADMIN_ID, f"üí¨ T è·¥ò·¥á ·¥õ ú·¥á “ì…™…¥·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è s·¥á…¥·¥Ö ·¥õ·¥è ·¥ús·¥á Ä {target_id}  ô·¥á“ì·¥è Ä·¥á ·¥á…¥·¥Ö…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ:")
            bot.register_next_step_handler_by_chat_id(ADMIN_ID, lambda m: finish_chat(m, target_id))
            return

        # CONFIRM/CANCEL PAYMENT
        if target_id not in pending_messages:
            bot.send_message(ADMIN_ID, "‚ö†Ô∏è N·¥è ·¥ò·¥á…¥·¥Ö…™…¥…¢  Ä·¥á«´·¥ú·¥ás·¥õ “ì Ä·¥è·¥ç ·¥õ ú…™s ·¥ús·¥á Ä.")
            return

        info = pending_messages.pop(target_id)
        service = info.get('service', 'Service')

        if action == "confirm":
            bot.send_message(target_id, f"‚úÖ Y·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ …™s s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü! G·¥á…¥·¥á Ä·¥Ä·¥õ…™…¥…¢ {service} ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ‚Ä¶")
            kb = InlineKeyboardMarkup()
            kb.add(InlineKeyboardButton("üí¨ C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä", callback_data=f"chat|{target_id}"))
            bot.send_message(ADMIN_ID, f"P·¥Ä è·¥ç·¥á…¥·¥õ ·¥Ñ·¥è…¥“ì…™ Ä·¥ç·¥á·¥Ö “ì·¥è Ä ·¥ús·¥á Ä {target_id}.", reply_markup=kb)
        else:
            bot.send_message(target_id, "‚ùå Y·¥è·¥ú Ä ·¥ò·¥Ä è·¥ç·¥á…¥·¥õ …¥·¥è·¥õ  Ä·¥á·¥Ñ·¥á…™·¥†·¥á·¥Ö ·¥Ä…¥·¥Ö  è·¥è·¥ú Ä «´·¥ú·¥á Ä è …™s ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.")
            bot.send_message(ADMIN_ID, f"‚ùå YP·¥Ä è·¥ç·¥á…¥·¥õ ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö “ì·¥è Ä ·¥ús·¥á Ä. {target_id}.")


# -----------------------
# FINISH CHAT FUNCTION
# -----------------------
def finish_chat(msg, target_id):
    final_text = msg.text.strip()
    if target_id in active_chats and active_chats[target_id]:
        bot.send_message(target_id, final_text)
        active_chats.pop(target_id, None)
        bot.send_message(ADMIN_ID, f"üí¨ C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä {target_id} ended.")
    else:
        bot.send_message(ADMIN_ID, f"‚ö†Ô∏è N·¥è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á C ú·¥Ä·¥õ ·¥°…™·¥õ ú Us·¥á Ä {target_id}.")


# -----------------------
# RUN BOT
# -----------------------
print("‚úÖ  ô Ä·¥Ä…¥·¥Ö·¥á·¥Ö  ú·¥á Ä·¥è·¥ã·¥ú  ô·¥è·¥õ  Ä·¥ú…¥…¥…™…¥…¢‚Ä¶")
bot.infinity_polling()
